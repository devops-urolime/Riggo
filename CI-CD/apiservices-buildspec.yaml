version: 0.2

phases:
  install:
    runtime-versions:
        java: openjdk11
        docker: 18
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_REGION --no-include-email)
  build:
    commands:
      - echo Starting Maven build....
      - cd spring-api-services && ./gradlew build
      - sleep 2s
      - ls -la build/libs
      - echo Building docker image........
      - docker build -t $REPOSITORY_URL:latest .
  post_build:
    commands:
      - if [ $CODEBUILD_BUILD_SUCCEEDING = 1 ]; then echo Build completed on `date`; echo Pushing Docker image to ECR $REPOSITORY_URL ; docker push $REPOSITORY_URL:latest ; echo Writing image definitions file...; printf '{"ImageURI":"%s"}' $REPOSITORY_URL:latest > imageDetail.json; echo Image push completed on `date`;aws ecs describe-task-definition --task-definition $TASKDEF_NAME | jq '.taskDefinition' > taskdef.json;cat taskdef.json |  jq --arg IMAGE $ECR_PLACEHOLDER '.containerDefinitions[].image = $IMAGE' > task.json && mv task.json taskdef.json;cp ../CI-CD/appspec_template.yaml . && envsubst < appspec_template.yaml > appspec.yaml; else echo Build failed ignoring deployment ; fi
      - echo Deployment completed on `date`
artifacts:
  files:
    - appspec.yaml
    - taskdef.json
  base-directory: 'spring-api-services'    
  secondary-artifacts:
    Riggo-deploy:
      files:
        - appspec.yaml
        - taskdef.json
        - imageDetail.json
      base-directory: 'spring-api-services'
cache:
  paths:
     - '/root/.gradle/wrapper/**/*'
     - '/root/.gradle/caches/**/*'
